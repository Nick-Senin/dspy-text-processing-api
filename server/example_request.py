import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVER_URL = "http://localhost:5000"  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
# SERVER_URL = "https://081d-138-68-156-65.ngrok-free.app"  # Ngrok URL

def make_request(text, banal_threshold=0.6, reproducibility_threshold=0.7):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞."""
    
    data = {
        "text": text,
        "banal_threshold": banal_threshold,
        "reproducibility_threshold": reproducibility_threshold
    }
    
    try:
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {SERVER_URL}/process")
        print(f"üìù –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}")
        print(f"üéØ –ü–æ—Ä–æ–≥–∏: –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å={banal_threshold}, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å={reproducibility_threshold}")
        print("\n" + "="*60)
        
        response = requests.post(
            f"{SERVER_URL}/process",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('success'):
                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                filtered_count = result.get('processed_count', 0)
                total_count = result.get('total_count', 0)
                filter_rate = (total_count - filtered_count) / total_count * 100 if total_count > 0 else 0
                
                print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"   –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–≤—è–∑–æ–∫: {total_count}")
                print(f"   –ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä—ã: {filtered_count}")
                print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {total_count - filtered_count} ({filter_rate:.1f}%)")
                
                # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏
                filtered_triplets = result.get('filtered_triplets', [])
                if filtered_triplets:
                    print(f"\nüéØ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –°–í–Ø–ó–ö–ò ({len(filtered_triplets)}):")
                    for i, triplet in enumerate(filtered_triplets, 1):
                        print(f"\n   {i}. –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {triplet.get('initial_state', 'N/A')}")
                        print(f"      –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: {triplet.get('transformation', 'N/A')}")
                        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {triplet.get('result', 'N/A')}")
                else:
                    print("\nüéØ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –°–í–Ø–ó–ö–ò: –ù–µ—Ç")
                
                # –í—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏
                unfiltered_triplets = result.get('unfiltered_triplets', [])
                if unfiltered_triplets:
                    print(f"\nüìã –í–°–ï –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –°–í–Ø–ó–ö–ò ({len(unfiltered_triplets)}):")
                    for i, triplet in enumerate(unfiltered_triplets, 1):
                        print(f"\n   {i}. –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {triplet.get('initial_state', 'N/A')}")
                        print(f"      –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è: {triplet.get('transformation', 'N/A')}")
                        print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç: {triplet.get('result', 'N/A')}")
                
                # –ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∫–∏
                failed_reasoning = result.get('failed_reasoning', '')
                if failed_reasoning:
                    print(f"\n‚ùå –ü–†–ò–ß–ò–ù–´ –û–¢–§–ò–õ–¨–¢–†–û–í–ö–ò:")
                    print(f"   {failed_reasoning}")
                else:
                    print(f"\n‚ùå –ü–†–ò–ß–ò–ù–´ –û–¢–§–ò–õ–¨–¢–†–û–í–ö–ò: –ù–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('message')}")
                
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            except:
                print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
                
    except requests.exceptions.Timeout:
        print("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
    except requests.exceptions.ConnectionError:
        print("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API."""
    
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
    print("="*60)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    print("\nüîπ –ü–†–ò–ú–ï–† 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
    simple_text = "–ß–µ–ª–æ–≤–µ–∫ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É. –û–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥. –ü–æ–ª—É—á–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    make_request(simple_text, banal_threshold=0.6, reproducibility_threshold=0.7)
    
    # –ü—Ä–∏–º–µ—Ä 2: –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç
    print("\n\nüîπ –ü–†–ò–ú–ï–† 2: –°–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç")
    complex_text = """–ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–Ω —á–∞—Å—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –µ—ë –ø—Ä–∏–≤—ã—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏. 
    –û–¥–Ω–∞–∫–æ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã. 
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º—É –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. 
    –í–∞–∂–Ω–æ –Ω–µ –±–æ—è—Ç—å—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è."""
    make_request(complex_text, banal_threshold=0.5, reproducibility_threshold=0.6)
    
    # –ü—Ä–∏–º–µ—Ä 3: –¢–µ–∫—Å—Ç —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    print("\n\nüîπ –ü–†–ò–ú–ï–† 3: –°—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    make_request(simple_text, banal_threshold=0.8, reproducibility_threshold=0.9)
    
    print("\n" + "="*60)
    print("‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()