#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ Flask —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞.
"""

import requests
import json

def main():
    # URL —Å–µ—Ä–≤–µ—Ä–∞
    url = "http://localhost:5000/process"
    
    # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    sample_text = """
    –ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–Ω —á–∞—Å—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –µ—ë –ø—Ä–∏–≤—ã—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏. 
    –û–¥–Ω–∞–∫–æ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã. 
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º—É –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
    """
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    data = {
        "text": sample_text.strip(),
        "banal_threshold": 0.6,
        "reproducibility_threshold": 0.7
    }
    
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Flask —Å–µ—Ä–≤–µ—Ä—É...")
    print(f"üìù –¢–µ–∫—Å—Ç: {data['text'][:100]}...")
    print(f"üéØ –ü–æ—Ä–æ–≥ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {data['banal_threshold']}")
    print(f"üîÑ –ü–æ—Ä–æ–≥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏: {data['reproducibility_threshold']}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            url,
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            result = response.json()
            
            print("\n‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–≤—è–∑–æ–∫: {result.get('total_count', 0)}")
            print(f"‚ú® –ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä—ã: {result.get('processed_count', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏ (–ø—Ä–æ—à–µ–¥—à–∏–µ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã)
            filtered = result.get('filtered_triplets', [])
            if filtered:
                print(f"\n‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏ (–ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã) ({len(filtered)}):")
                for i, triplet in enumerate(filtered, 1):
                    print(f"\n  {i}. –°–≤—è–∑–∫–∞:")
                    print(f"     –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {triplet.get('initial_state', 'N/A')}")
                    print(f"     –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {triplet.get('transformation', 'N/A')}")
                    print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {triplet.get('result', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏
            unfiltered = result.get('unfiltered_triplets', [])
            if unfiltered:
                print(f"\nüìã –í—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∫–∏ ({len(unfiltered)}):")
                for i, triplet in enumerate(unfiltered, 1):
                    print(f"\n  {i}. –°–≤—è–∑–∫–∞:")
                    print(f"     –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {triplet.get('initial_state', 'N/A')}")
                    print(f"     –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {triplet.get('transformation', 'N/A')}")
                    print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {triplet.get('result', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            failed_reasoning = result.get('failed_reasoning', '')
            if failed_reasoning:
                print(f"\nüö´ –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∫–∞—Ö:")
                print(failed_reasoning)
            
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            try:
                error_data = response.json()
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            except:
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                
    except requests.exceptions.ConnectionError:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python app.py")
        
    except requests.exceptions.Timeout:
        print("\n‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()