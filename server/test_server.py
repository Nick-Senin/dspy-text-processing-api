import requests
import json

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
test_data = {
    "text": "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.",
    "banal_threshold": 0.6,
    "reproducibility_threshold": 0.7
}

def test_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É Flask —Å–µ—Ä–≤–µ—Ä–∞."""
    base_url = "http://localhost:5000"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{base_url}/health")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
    except requests.exceptions.ConnectionError:
        print("   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
        return
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    try:
        response = requests.get(f"{base_url}/")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {json.dumps(response.json(), ensure_ascii=False, indent=2)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞...")
    try:
        response = requests.post(
            f"{base_url}/process",
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        
        if result.get('success'):
            print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            print(f"   üìä –í—Å–µ–≥–æ —Å–≤—è–∑–æ–∫: {result.get('total_count', 0)}")
            print(f"   ‚ú® –ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä—ã: {result.get('processed_count', 0)}")
            
            if result.get('filtered_triplets'):
                print(f"   ‚úÖ –ü–µ—Ä–≤–∞—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤—è–∑–∫–∞: {result['filtered_triplets'][0]}")
            
            if result.get('unfiltered_triplets'):
                print(f"   üìù –ü–µ—Ä–≤–∞—è –Ω–µ–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤—è–∑–∫–∞: {result['unfiltered_triplets'][0]}")
            
            if result.get('failed_reasoning'):
                print(f"   üö´ –î–µ—Ç–∞–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {result['failed_reasoning'][:200]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('message')}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    try:
        response = requests.post(
            f"{base_url}/process",
            json={"invalid": "data"},
            headers={'Content-Type': 'application/json'}
        )
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        print(f"   –û—Ç–≤–µ—Ç: {result.get('message')}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_server()