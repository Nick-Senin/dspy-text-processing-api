import requests
import json
import time

# URL —Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = "http://localhost:5000"

def test_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_index():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    print("\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /...")
    try:
        response = requests.get(f"{BASE_URL}/")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        data = response.json()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {list(data.get('endpoints', {}).keys())}")
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_process_simple():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /process —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º...")
    
    data = {
        "text": "–ß–µ–ª–æ–≤–µ–∫ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É. –û–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥. –ü–æ–ª—É—á–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        "banal_threshold": 0.6,
        "reproducibility_threshold": 0.7
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/process",
            json=data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        
        if result.get('success'):
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {result.get('processed_count', 0)}")
            print(f"–í—Å–µ–≥–æ —Å–≤—è–∑–æ–∫: {result.get('total_count', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–æ–∫
            filtered = result.get('filtered_triplets', [])
            unfiltered = result.get('unfiltered_triplets', [])
            
            if filtered:
                print(f"\n–ü—Ä–∏–º–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–≤—è–∑–∫–∏:")
                print(json.dumps(filtered[0], ensure_ascii=False, indent=2))
            
            if unfiltered:
                print(f"\n–ü—Ä–∏–º–µ—Ä –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å–≤—è–∑–∫–∏:")
                print(json.dumps(unfiltered[0], ensure_ascii=False, indent=2))
                
            if result.get('failed_reasoning'):
                print(f"\n–ü—Ä–∏—á–∏–Ω—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
                print(result['failed_reasoning'][:200] + "...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
            
        return response.status_code == 200 and result.get('success')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_process_complex():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /process —Å–æ —Å–ª–æ–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º...")
    
    data = {
        "text": """–ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –æ–Ω —á–∞—Å—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å –µ—ë –ø—Ä–∏–≤—ã—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏. 
        –û–¥–Ω–∞–∫–æ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã. 
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º—É –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. 
        –í–∞–∂–Ω–æ –Ω–µ –±–æ—è—Ç—å—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è.""",
        "banal_threshold": 0.5,
        "reproducibility_threshold": 0.6
    }
    
    try:
        start_time = time.time()
        response = requests.post(
            f"{BASE_URL}/process",
            json=data,
            headers={'Content-Type': 'application/json'},
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        )
        end_time = time.time()
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        result = response.json()
        
        if result.get('success'):
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–æ–∫: {result.get('processed_count', 0)}")
            print(f"–í—Å–µ–≥–æ —Å–≤—è–∑–æ–∫: {result.get('total_count', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            filtered_count = len(result.get('filtered_triplets', []))
            total_count = len(result.get('unfiltered_triplets', []))
            filter_rate = (total_count - filtered_count) / total_count * 100 if total_count > 0 else 0
            
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {filter_rate:.1f}%")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
            
        return response.status_code == 200 and result.get('success')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_error_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –¢–µ—Å—Ç 1: –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    try:
        response = requests.post(f"{BASE_URL}/process", json={})
        print(f"–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ text
    try:
        response = requests.post(f"{BASE_URL}/process", json={"banal_threshold": 0.5})
        print(f"–ë–µ–∑ –ø–æ–ª—è text - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –±–µ–∑ text: {e}")
    
    # –¢–µ—Å—Ç 3: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤
    try:
        response = requests.post(f"{BASE_URL}/process", json={
            "text": "–¢–µ—Å—Ç",
            "banal_threshold": "–Ω–µ —á–∏—Å–ª–æ"
        })
        print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –°—Ç–∞—Ç—É—Å: {response.status_code}")
        result = response.json()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞: {e}")
    
    return True

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"–ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    
    tests = [
        ("Health Check", test_health),
        ("Index Page", test_index),
        ("Simple Processing", test_process_simple),
        ("Complex Processing", test_process_complex),
        ("Error Cases", test_error_cases)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print(f"{'='*50}")
        
        try:
            success = test_func()
            results.append((test_name, success))
            print(f"\n{'‚úÖ –ü–†–û–ô–î–ï–ù' if success else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{test_name:.<40} {status}")
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()